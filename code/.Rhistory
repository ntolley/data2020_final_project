geom_boxplot(na.rm = TRUE) +
labs(fill = "Beta") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_bootstrap_lm_reaction
# creates a histogram of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = estimate)) +
ggtitle("Bootstrap Results") +
xlab("Estimate") +
ylab("Count") +
geom_histogram(color = "gray15", fill = "gray90", binwidth = 30) +
facet_wrap(~beta) +
theme_bw()
plot_bootstrap_lm_reaction
# instantiates matrices to contain the beta coefficients for all 1000 samples
boot <- 1000
beta1_boot <- matrix(NA, boot, 1)
beta2_boot <- matrix(NA, boot, 1)
beta3_boot <- matrix(NA, boot, 1)
beta4_boot <- matrix(NA, boot, 1)
beta5_boot <- matrix(NA, boot, 1)
beta6_boot <- matrix(NA, boot, 1)
beta7_boot <- matrix(NA, boot, 1)
# performs the bootstrap iteratively to compute all beta coefficients
for (i in 1:boot) {
s_boot <- sample(c(1:dim(output_df)[1]), dim(output_df)[1], replace = TRUE)
data_boot <- output_df[s_boot,]
fit_boot <- lm(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = data_boot)
beta1_boot[i,] <- fit_boot$coef[2]
beta2_boot[i,] <- fit_boot$coef[3]
beta3_boot[i,] <- fit_boot$coef[4]
beta4_boot[i,] <- fit_boot$coef[5]
beta5_boot[i,] <- fit_boot$coef[6]
beta6_boot[i,] <- fit_boot$coef[7]
beta7_boot[i,] <- fit_boot$coef[8]
}
# prepares a dataframe with both bootstrap and backward procedure coefficients
df_bootstrap_lm_reaction <- data.frame(beta = rep(c("Beta1: Mean_Freq_Span_Gamma", "Beta2: Mean_Event_Duration_Gamma",
"Beta3: STD_Event_Duration_Gamma", "Beta4: STD_Peak_Time_Beta",
"Beta5: STD_Peak_Power_Beta", "Beta6: Count_Beta",
"Beta7: Count_Gamma"), each = boot),
estimate = c(beta1_boot, beta2_boot, beta3_boot, beta4_boot, beta5_boot,
beta6_boot, beta7_boot))
# creates a boxplot of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = beta, y = estimate, fill = beta)) +
xlab("Beta") +
ylab("Estimate") +
ggtitle("Bootstrapped Results") +
geom_boxplot(na.rm = TRUE) +
labs(fill = "Beta") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_bootstrap_lm_reaction
# creates a histogram of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = estimate)) +
ggtitle("Bootstrap Results") +
xlab("Estimate") +
ylab("Count") +
geom_histogram(color = "gray15", fill = "gray90", binwidth = 20) +
facet_wrap(~beta) +
theme_bw()
plot_bootstrap_lm_reaction
# instantiates matrices to contain the beta coefficients for all 1000 samples
boot <- 1000
beta1_boot <- matrix(NA, boot, 1)
beta2_boot <- matrix(NA, boot, 1)
beta3_boot <- matrix(NA, boot, 1)
beta4_boot <- matrix(NA, boot, 1)
beta5_boot <- matrix(NA, boot, 1)
beta6_boot <- matrix(NA, boot, 1)
beta7_boot <- matrix(NA, boot, 1)
# performs the bootstrap iteratively to compute all beta coefficients
for (i in 1:boot) {
s_boot <- sample(c(1:dim(output_df)[1]), dim(output_df)[1], replace = TRUE)
data_boot <- output_df[s_boot,]
fit_boot <- lm(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = data_boot)
beta1_boot[i,] <- fit_boot$coef[2]
beta2_boot[i,] <- fit_boot$coef[3]
beta3_boot[i,] <- fit_boot$coef[4]
beta4_boot[i,] <- fit_boot$coef[5]
beta5_boot[i,] <- fit_boot$coef[6]
beta6_boot[i,] <- fit_boot$coef[7]
beta7_boot[i,] <- fit_boot$coef[8]
}
# prepares a dataframe with both bootstrap and backward procedure coefficients
df_bootstrap_lm_reaction <- data.frame(beta = rep(c("Beta1: Mean_Freq_Span_Gamma", "Beta2: Mean_Event_Duration_Gamma",
"Beta3: STD_Event_Duration_Gamma", "Beta4: STD_Peak_Time_Beta",
"Beta5: STD_Peak_Power_Beta", "Beta6: Count_Beta",
"Beta7: Count_Gamma"), each = boot),
estimate = c(beta1_boot, beta2_boot, beta3_boot, beta4_boot, beta5_boot,
beta6_boot, beta7_boot))
# creates a boxplot of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = beta, y = estimate, fill = beta)) +
xlab("Beta") +
ylab("Estimate") +
ggtitle("Bootstrapped Results") +
geom_boxplot(na.rm = TRUE) +
labs(fill = "Beta") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_bootstrap_lm_reaction
# creates a histogram of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = estimate)) +
ggtitle("Bootstrap Results") +
xlab("Estimate") +
ylab("Count") +
geom_histogram(color = "gray15", fill = "gray90", binwidth = 10) +
facet_wrap(~beta) +
theme_bw()
plot_bootstrap_lm_reaction
# instantiates matrices to contain the beta coefficients for all 1000 samples
boot <- 1000
beta1_boot <- matrix(NA, boot, 1)
beta2_boot <- matrix(NA, boot, 1)
beta3_boot <- matrix(NA, boot, 1)
beta4_boot <- matrix(NA, boot, 1)
beta5_boot <- matrix(NA, boot, 1)
beta6_boot <- matrix(NA, boot, 1)
beta7_boot <- matrix(NA, boot, 1)
# performs the bootstrap iteratively to compute all beta coefficients
for (i in 1:boot) {
s_boot <- sample(c(1:dim(output_df)[1]), dim(output_df)[1], replace = TRUE)
data_boot <- output_df[s_boot,]
fit_boot <- lm(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = data_boot)
beta1_boot[i,] <- fit_boot$coef[2]
beta2_boot[i,] <- fit_boot$coef[3]
beta3_boot[i,] <- fit_boot$coef[4]
beta4_boot[i,] <- fit_boot$coef[5]
beta5_boot[i,] <- fit_boot$coef[6]
beta6_boot[i,] <- fit_boot$coef[7]
beta7_boot[i,] <- fit_boot$coef[8]
}
# prepares a dataframe with both bootstrap and backward procedure coefficients
df_bootstrap_lm_reaction <- data.frame(beta = rep(c("Beta1: Mean_Freq_Span_Gamma", "Beta2: Mean_Event_Duration_Gamma",
"Beta3: STD_Event_Duration_Gamma", "Beta4: STD_Peak_Time_Beta",
"Beta5: STD_Peak_Power_Beta", "Beta6: Count_Beta",
"Beta7: Count_Gamma"), each = boot),
estimate = c(beta1_boot, beta2_boot, beta3_boot, beta4_boot, beta5_boot,
beta6_boot, beta7_boot))
# creates a boxplot of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = beta, y = estimate, fill = beta)) +
xlab("Beta") +
ylab("Estimate") +
ggtitle("Bootstrapped Results") +
geom_boxplot(na.rm = TRUE) +
labs(fill = "Beta") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_bootstrap_lm_reaction
# creates a histogram of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = estimate)) +
ggtitle("Bootstrap Results") +
xlab("Estimate") +
ylab("Count") +
geom_histogram(color = "gray15", fill = "gray90", binwidth = 5) +
facet_wrap(~beta) +
theme_bw()
plot_bootstrap_lm_reaction
# instantiates matrices to contain the beta coefficients for all 1000 samples
boot <- 1000
beta1_boot <- matrix(NA, boot, 1)
beta2_boot <- matrix(NA, boot, 1)
beta3_boot <- matrix(NA, boot, 1)
beta4_boot <- matrix(NA, boot, 1)
beta5_boot <- matrix(NA, boot, 1)
beta6_boot <- matrix(NA, boot, 1)
beta7_boot <- matrix(NA, boot, 1)
# performs the bootstrap iteratively to compute all beta coefficients
for (i in 1:boot) {
s_boot <- sample(c(1:dim(output_df)[1]), dim(output_df)[1], replace = TRUE)
data_boot <- output_df[s_boot,]
fit_boot <- lm(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = data_boot)
beta1_boot[i,] <- fit_boot$coef[2]
beta2_boot[i,] <- fit_boot$coef[3]
beta3_boot[i,] <- fit_boot$coef[4]
beta4_boot[i,] <- fit_boot$coef[5]
beta5_boot[i,] <- fit_boot$coef[6]
beta6_boot[i,] <- fit_boot$coef[7]
beta7_boot[i,] <- fit_boot$coef[8]
}
# prepares a dataframe with both bootstrap and backward procedure coefficients
df_bootstrap_lm_reaction <- data.frame(beta = rep(c("Beta1: Mean_Freq_Span_Gamma", "Beta2: Mean_Event_Duration_Gamma",
"Beta3: STD_Event_Duration_Gamma", "Beta4: STD_Peak_Time_Beta",
"Beta5: STD_Peak_Power_Beta", "Beta6: Count_Beta",
"Beta7: Count_Gamma"), each = boot),
estimate = c(beta1_boot, beta2_boot, beta3_boot, beta4_boot, beta5_boot,
beta6_boot, beta7_boot))
# creates a boxplot of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = beta, y = estimate, fill = beta)) +
xlab("Beta") +
ylab("Estimate") +
ggtitle("Bootstrapped Results") +
geom_boxplot(na.rm = TRUE) +
labs(fill = "Beta") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_bootstrap_lm_reaction
# creates a histogram of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = estimate)) +
ggtitle("Bootstrap Results") +
xlab("Estimate") +
ylab("Count") +
geom_histogram(color = "gray15", fill = "gray90", binwidth = 5) +
facet_wrap(~beta) +
theme_bw()
plot_bootstrap_lm_reaction
# instantiates matrices to contain the beta coefficients for all 1000 samples
boot <- 1000
beta1_boot <- matrix(NA, boot, 1)
beta2_boot <- matrix(NA, boot, 1)
beta3_boot <- matrix(NA, boot, 1)
beta4_boot <- matrix(NA, boot, 1)
beta5_boot <- matrix(NA, boot, 1)
beta6_boot <- matrix(NA, boot, 1)
beta7_boot <- matrix(NA, boot, 1)
# performs the bootstrap iteratively to compute all beta coefficients
for (i in 1:boot) {
s_boot <- sample(c(1:dim(output_df)[1]), dim(output_df)[1], replace = TRUE)
data_boot <- output_df[s_boot,]
fit_boot <- lm(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = data_boot)
beta1_boot[i,] <- fit_boot$coef[2]
beta2_boot[i,] <- fit_boot$coef[3]
beta3_boot[i,] <- fit_boot$coef[4]
beta4_boot[i,] <- fit_boot$coef[5]
beta5_boot[i,] <- fit_boot$coef[6]
beta6_boot[i,] <- fit_boot$coef[7]
beta7_boot[i,] <- fit_boot$coef[8]
}
# prepares a dataframe with both bootstrap and backward procedure coefficients
df_bootstrap_lm_reaction <- data.frame(beta = rep(c("Beta1: Mean_Freq_Span_Gamma", "Beta2: Mean_Event_Duration_Gamma",
"Beta3: STD_Event_Duration_Gamma", "Beta4: STD_Peak_Time_Beta",
"Beta5: STD_Peak_Power_Beta", "Beta6: Count_Beta",
"Beta7: Count_Gamma"), each = boot),
estimate = c(beta1_boot, beta2_boot, beta3_boot, beta4_boot, beta5_boot,
beta6_boot, beta7_boot))
# creates a boxplot of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = beta, y = estimate, fill = beta)) +
xlab("Beta") +
ylab("Estimate") +
ggtitle("Bootstrapped Results") +
geom_boxplot(na.rm = TRUE) +
labs(fill = "Beta") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_bootstrap_lm_reaction
# creates a histogram of the bootstrap results for each beta
plot_bootstrap_lm_reaction <- ggplot(df_bootstrap_lm_reaction, aes(x = estimate)) +
ggtitle("Bootstrap Results") +
xlab("Estimate") +
ylab("Count") +
geom_histogram(color = "gray15", fill = "gray90", binwidth = 5) +
facet_wrap(~beta) +
theme_bw()
plot_bootstrap_lm_reaction
output_df <- na.omit(output_df)
# computes the LOO cross validation for all data without missing values
ctrl_LOOCV <- trainControl(method = "LOOCV")
rm(list=ls())
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(MASS))
directory <- "~/Desktop/2023 Spring Semester/DATA 2020/Final Project/data2020_final_project/data"
df_alpha <- read_csv(file.path(directory, "alpha_event_data.csv"), show_col_types = FALSE)
df_beta <- read_csv(file.path(directory, "beta_event_data.csv"), show_col_types = FALSE)
df_gamma <- read_csv(file.path(directory, "gamma_event_data.csv"), show_col_types = FALSE)
band_names <- rep(c('alpha', 'beta', 'gamma'),
times=c(nrow(df_alpha), nrow(df_beta), nrow(df_gamma)))
df <- rbind(df_alpha, df_beta, df_gamma)
names(df) <- tolower(str_replace_all(names(df_alpha), ' ', '_')) # clean names
df['freq_band'] <- band_names
df['position'] <- as.character(df$position)
df['layout'] <- as.character(df$layout)
median_reaction_time <- median(df$reaction_time, na.rm = TRUE)
median_reach_time <- median(df$reach_time, na.rm = TRUE)
# Calculate the statistics and add a binary variable column based on the median reaction_time
stats_df <- df %>%
group_by(trial, freq_band) %>%
summarize(
mean_freq_span = mean(frequency_span, na.rm = TRUE),
std_freq_span = sd(frequency_span, na.rm = TRUE),
mean_event_duration = mean(event_duration, na.rm = TRUE),
std_event_duration = sd(event_duration, na.rm = TRUE),
mean_peak_time = mean(peak_time, na.rm = TRUE),
std_peak_time = sd(peak_time, na.rm = TRUE),
mean_peak_power = mean(peak_power, na.rm = TRUE),
std_peak_power = sd(peak_power, na.rm = TRUE),
count = n(),
.groups = 'drop'
)
# Add reaction_time, reach_time, and reaction_time_binary columns
summary_df <- df %>%
group_by(trial) %>%
summarize(
reaction_time = first(reaction_time),
reach_time = first(reach_time),
reaction_time_binary = ifelse(first(reaction_time) > median_reaction_time, 1, 0),
reach_time_binary = ifelse(first(reach_time) > median_reach_time, 1, 0),
.groups = 'drop'
)
# Pivot the statistics dataframe from long to wide format
output_df <- stats_df %>%
pivot_wider(
id_cols = trial,
names_from = freq_band,
values_from = c(mean_freq_span, std_freq_span, mean_event_duration, std_event_duration, mean_peak_time, std_peak_time, mean_peak_power, std_peak_power, count),
names_sep = "_"
) %>%
left_join(summary_df, by = "trial")
output_df
suppressPackageStartupMessages(library(caret))
output_df <- na.omit(output_df)
# computes the LOO cross validation for all data without missing values
ctrl_LOOCV <- trainControl(method = "LOOCV")
model_LOO <- train(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = output_df,
method = "lm", trControl = ctrl_LOOCV)
print(model_LOO)
# computes the K-fold cross validation with 10 folds for all data without missing values
ctrl_Kfold <- trainControl(method = "cv", number = 10)
model_Kfold <- train(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = output_df,
method = "lm", trControl = ctrl_Kfold)
print(model_Kfold)
# creates a scatter plot of predicted vs. true values of LOO cross validation
cv_plot <- ggplot(output_df, aes(x = output_df$reaction_time, y = model_LOO$pred[, "pred"])) +
ggtitle("LOO Cross Validation: Predicted vs. True") +
xlab("True Value") +
ylab("Predicted Value") +
geom_point(size = 0.5) +
theme_bw()
cv_plot
# creates a scatter plot of predicted vs. true values of LOO cross validation
cv_plot <- ggplot(output_df, aes(x = reaction_time, y = model_LOO$pred[, "pred"])) +
ggtitle("LOO Cross Validation: Predicted vs. True") +
xlab("True Value") +
ylab("Predicted Value") +
geom_point(size = 0.5) +
theme_bw()
cv_plot
# creates a scatter plot of predicted vs. true values of LOO cross validation
loocv_plot <- ggplot(output_df, aes(x = reaction_time, y = model_LOO$pred[, "pred"])) +
ggtitle("LOO Cross Validation: Predicted vs. True") +
xlab("True Value") +
ylab("Predicted Value") +
geom_point(size = 0.5) +
theme_bw()
loocv_plot
# creates a scatter plot of predicted vs. true values of LOO cross validation
kfoldcv_plot <- ggplot(output_df, aes(x = reaction_time, y = model_Kfold$pred[, "pred"])) +
ggtitle("K-Fold Cross Validation: Predicted vs. True") +
xlab("True Value") +
ylab("Predicted Value") +
geom_point(size = 0.5) +
theme_bw()
kfoldcv_plot
# creates a scatter plot of predicted vs. true values of LOO cross validation
kfoldcv_plot <- ggplot(output_df, aes(x = reaction_time, y = model_Kfold$pred[, "pred"])) +
ggtitle("K-Fold Cross Validation: Predicted vs. True") +
xlab("True Value") +
ylab("Predicted Value") +
# geom_point(size = 0.5) +
theme_bw()
kfoldcv_plot
# creates a scatter plot of predicted vs. true values of LOO cross validation
kfoldcv_plot <- ggplot(output_df, aes(x = reaction_time, y = model_Kfold$pred[, "pred"])) +
ggtitle("K-Fold Cross Validation: Predicted vs. True") +
xlab("True Value") +
ylab("Predicted Value") +
geom_point(size = 0.5) +
theme_bw()
kfoldcv_plot
model_Kfold$pred[, "pred"]
View(model_Kfold)
rm(list=ls())
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(MASS))
directory <- "~/Desktop/2023 Spring Semester/DATA 2020/Final Project/data2020_final_project/data"
df_alpha <- read_csv(file.path(directory, "alpha_event_data.csv"), show_col_types = FALSE)
df_beta <- read_csv(file.path(directory, "beta_event_data.csv"), show_col_types = FALSE)
df_gamma <- read_csv(file.path(directory, "gamma_event_data.csv"), show_col_types = FALSE)
band_names <- rep(c('alpha', 'beta', 'gamma'),
times=c(nrow(df_alpha), nrow(df_beta), nrow(df_gamma)))
df <- rbind(df_alpha, df_beta, df_gamma)
names(df) <- tolower(str_replace_all(names(df_alpha), ' ', '_')) # clean names
df['freq_band'] <- band_names
df['position'] <- as.character(df$position)
df['layout'] <- as.character(df$layout)
median_reaction_time <- median(df$reaction_time, na.rm = TRUE)
median_reach_time <- median(df$reach_time, na.rm = TRUE)
# Calculate the statistics and add a binary variable column based on the median reaction_time
stats_df <- df %>%
group_by(trial, freq_band) %>%
summarize(
mean_freq_span = mean(frequency_span, na.rm = TRUE),
std_freq_span = sd(frequency_span, na.rm = TRUE),
mean_event_duration = mean(event_duration, na.rm = TRUE),
std_event_duration = sd(event_duration, na.rm = TRUE),
mean_peak_time = mean(peak_time, na.rm = TRUE),
std_peak_time = sd(peak_time, na.rm = TRUE),
mean_peak_power = mean(peak_power, na.rm = TRUE),
std_peak_power = sd(peak_power, na.rm = TRUE),
count = n(),
.groups = 'drop'
)
# Add reaction_time, reach_time, and reaction_time_binary columns
summary_df <- df %>%
group_by(trial) %>%
summarize(
reaction_time = first(reaction_time),
reach_time = first(reach_time),
reaction_time_binary = ifelse(first(reaction_time) > median_reaction_time, 1, 0),
reach_time_binary = ifelse(first(reach_time) > median_reach_time, 1, 0),
.groups = 'drop'
)
# Pivot the statistics dataframe from long to wide format
output_df <- stats_df %>%
pivot_wider(
id_cols = trial,
names_from = freq_band,
values_from = c(mean_freq_span, std_freq_span, mean_event_duration, std_event_duration, mean_peak_time, std_peak_time, mean_peak_power, std_peak_power, count),
names_sep = "_"
) %>%
left_join(summary_df, by = "trial")
output_df
output_df <- na.omit(output_df)
# computes the LOO cross validation for all data without missing values
ctrl_LOOCV <- trainControl(method = "LOOCV")
model_LOO <- train(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = output_df,
method = "lm", trControl = ctrl_LOOCV)
print(model_LOO)
# computes the K-fold cross validation with 10 folds for all data without missing values
ctrl_Kfold <- trainControl(method = "cv", number = 10)
model_Kfold <- train(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = output_df,
method = "lm", trControl = ctrl_Kfold)
print(model_Kfold)
# creates a scatter plot of predicted vs. true values of LOO cross validation
loocv_plot <- ggplot(output_df, aes(x = reaction_time, y = model_LOO$pred[, "pred"])) +
ggtitle("LOO Cross Validation: Predicted vs. True") +
xlab("True Value") +
ylab("Predicted Value") +
geom_point(size = 0.5) +
theme_bw()
loocv_plot
# creates a scatter plot of predicted vs. true values of LOO cross validation
kfoldcv_plot <- ggplot(output_df, aes(x = reaction_time, y = model_Kfold$pred[, "pred"])) +
ggtitle("K-Fold Cross Validation: Predicted vs. True") +
xlab("True Value") +
ylab("Predicted Value") +
geom_point(size = 0.5) +
theme_bw()
kfoldcv_plot
View(model_Kfold)
View(model_LOO)
View(model_Kfold)
# computes the K-fold cross validation with 10 folds for all data without missing values
ctrl_Kfold <- trainControl(method = "cv", repeats = 10, number = 10)
model_Kfold <- train(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = output_df,
method = "lm", trControl = ctrl_Kfold)
print(model_Kfold)
# computes the K-fold cross validation with 10 folds for all data without missing values
ctrl_Kfold <- trainControl(method = "cv", number = 10)
model_Kfold <- train(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = output_df,
method = "lm", trControl = ctrl_Kfold)
print(model_Kfold)
# computes the K-fold cross validation with 10 folds for all data without missing values
ctrl_Kfold <- trainControl(method = "cv", number = 10)
model_Kfold <- train(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = output_df,
method = "lm", trControl = ctrl_Kfold)
predict(model_Kfold)
print(model_Kfold)
# computes the K-fold cross validation with 10 folds for all data without missing values
ctrl_Kfold <- trainControl(method = "cv", number = 10)
model_Kfold <- train(reaction_time ~ mean_freq_span_gamma + mean_event_duration_gamma
+ std_event_duration_gamma + std_peak_time_beta + std_peak_power_beta
+ count_beta + count_gamma, data = output_df,
method = "lm", trControl = ctrl_Kfold)
print(model_Kfold)
# creates a scatter plot of predicted vs. true values of LOO cross validation
kfoldcv_plot <- ggplot(output_df, aes(x = reaction_time, y = predict(model_Kfold))) +
ggtitle("K-Fold Cross Validation: Predicted vs. True") +
xlab("True Value") +
ylab("Predicted Value") +
geom_point(size = 0.5) +
theme_bw()
kfoldcv_plot
