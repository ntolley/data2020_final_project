mean_peak_power = mean(log(peak_power), na.rm = TRUE),
std_peak_power = sd(log(peak_power), na.rm = TRUE),
mean_peak_frequency = mean(peak_frequency, na.rm = TRUE),
std_peak_frequency = sd(peak_frequency, na.rm = TRUE),
count = n(),
.groups = 'drop'
)
# adds reaction_time, reach_time, and reaction_time_binary columns
summary_df <- df %>%
group_by(trial) %>%
summarize(
reaction_time = log(first(reaction_time)),
reach_time = log(first(reach_time)),
position = first(position),
layout = first(layout),
.groups = 'drop'
)
# pivots the statistics dataframe from long to wide format
pred_df <- stats_df %>%
pivot_wider(
id_cols = trial,
names_from = freq_band,
values_from = c(mean_freq_span, std_freq_span, mean_event_duration, std_event_duration, mean_peak_time, std_peak_time, mean_peak_power, std_peak_power,
mean_peak_frequency, std_peak_frequency, count),
names_sep = "_"
) %>%
left_join(summary_df, by = "trial")
pred_df <- pred_df %>% mutate(across(where(is.numeric), scale))
median_reaction_time <- median(pred_df$reaction_time)
pred_df['reaction_binary'] <- pred_df$reaction_time < median_reaction_time
median_reach_time <- median(pred_df$reach_time)
pred_df['reach_binary'] <- pred_df$reach_time < median_reach_time
# NA is calculated for std; when there is only 1 observation, replace with zero
pred_df[is.na(pred_df)] <- 0
reaction_linear_df <- subset(pred_df, select = -c(reach_time, reaction_binary, reach_binary))
reach_linear_df <- subset(pred_df, select = -c(reaction_time, reaction_binary, reach_binary))
reaction_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reach_binary))
reach_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reaction_binary))
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
# backward and forward stepwise regression
reaction_linear_step <- stepAIC(reaction_lm, direction = "both")
summary(reaction_linear_step)
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
# backward and forward stepwise regression
reaction_linear_step <- stepAIC(reaction_lm, direction = "both")
summary(reaction_linear_step)$coef
rm(list=ls())
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(MASS))
df_alpha <- read_csv("../data/alpha_event_data.csv", show_col_types = FALSE)
df_beta <- read_csv("../data/beta_event_data.csv", show_col_types = FALSE)
df_gamma <- read_csv("../data/gamma_event_data.csv", show_col_types = FALSE)
band_names <- rep(c('alpha', 'beta', 'gamma'),
times = c(nrow(df_alpha), nrow(df_beta), nrow(df_gamma)))
df <- rbind(df_alpha, df_beta, df_gamma)
names(df) <- tolower(str_replace_all(names(df_alpha), ' ', '_')) # clean names
df['freq_band'] <- band_names
df['position'] <- as.character(df$position)
df['layout'] <- as.character(df$layout)
stats_df <- df %>%
group_by(trial, freq_band) %>%
summarize(
mean_freq_span = mean(frequency_span, na.rm = TRUE),
std_freq_span = sd(frequency_span, na.rm = TRUE),
mean_event_duration = mean(event_duration, na.rm = TRUE),
std_event_duration = sd(event_duration, na.rm = TRUE),
mean_peak_time = mean(peak_time, na.rm = TRUE),
std_peak_time = sd(peak_time, na.rm = TRUE),
mean_peak_power = mean(log(peak_power), na.rm = TRUE),
std_peak_power = sd(log(peak_power), na.rm = TRUE),
mean_peak_frequency = mean(peak_frequency, na.rm = TRUE),
std_peak_frequency = sd(peak_frequency, na.rm = TRUE),
count = n(),
.groups = 'drop'
)
# adds reaction_time, reach_time, and reaction_time_binary columns
summary_df <- df %>%
group_by(trial) %>%
summarize(
reaction_time = log(first(reaction_time)),
reach_time = log(first(reach_time)),
position = first(position),
layout = first(layout),
.groups = 'drop'
)
# pivots the statistics dataframe from long to wide format
pred_df <- stats_df %>%
pivot_wider(
id_cols = trial,
names_from = freq_band,
values_from = c(mean_freq_span, std_freq_span, mean_event_duration, std_event_duration, mean_peak_time, std_peak_time, mean_peak_power, std_peak_power,
mean_peak_frequency, std_peak_frequency, count),
names_sep = "_"
) %>%
left_join(summary_df, by = "trial")
pred_df <- pred_df %>% mutate(across(where(is.numeric), scale))
median_reaction_time <- median(pred_df$reaction_time)
pred_df['reaction_binary'] <- pred_df$reaction_time < median_reaction_time
median_reach_time <- median(pred_df$reach_time)
pred_df['reach_binary'] <- pred_df$reach_time < median_reach_time
# NA is calculated for std; when there is only 1 observation, replace with zero
pred_df[is.na(pred_df)] <- 0
reaction_linear_df <- subset(pred_df, select = -c(reach_time, reaction_binary, reach_binary))
reach_linear_df <- subset(pred_df, select = -c(reaction_time, reaction_binary, reach_binary))
reaction_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reach_binary))
reach_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reaction_binary))
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
# backward and forward stepwise regression
reaction_linear_step <- stepAIC(reaction_lm, direction = "both")
summary(reaction_linear_step)$coef
reach_lm <- lm(reach_time ~ ., data = reach_linear_df)
# backward and forward stepwise regression
reach_linear_step <- stepAIC(reach_lm, direction = "both")
summary(reach_linear_step)$coef
reaction_logit <- glm(reaction_binary ~ ., family = binomial(link = "logit"), data = reaction_binary_df)
# backward and forward stepwise regression
reaction_logit_step <- stepAIC(reaction_logit, direction = "both")
summary(reaction_logit)$coef
reach_logit <- glm(reach_binary ~ ., family = binomial(link = "logit"), data = reach_binary_df)
# backward and forward stepwise regression
reach_logit_step <- stepAIC(reach_logit, direction = "both")
summary(reach_logit)$coef
summary(reaction_linear_step)
summary(reach_linear_step)
summary(reaction_logit_step)
summary(reach_logit_step)
invisible(summary(reaction_linear_step)$coef)
rm(list=ls())
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(MASS))
df_alpha <- read_csv("../data/alpha_event_data.csv", show_col_types = FALSE)
df_beta <- read_csv("../data/beta_event_data.csv", show_col_types = FALSE)
df_gamma <- read_csv("../data/gamma_event_data.csv", show_col_types = FALSE)
band_names <- rep(c('alpha', 'beta', 'gamma'),
times = c(nrow(df_alpha), nrow(df_beta), nrow(df_gamma)))
df <- rbind(df_alpha, df_beta, df_gamma)
names(df) <- tolower(str_replace_all(names(df_alpha), ' ', '_')) # clean names
df['freq_band'] <- band_names
df['position'] <- as.character(df$position)
df['layout'] <- as.character(df$layout)
stats_df <- df %>%
group_by(trial, freq_band) %>%
summarize(
mean_freq_span = mean(frequency_span, na.rm = TRUE),
std_freq_span = sd(frequency_span, na.rm = TRUE),
mean_event_duration = mean(event_duration, na.rm = TRUE),
std_event_duration = sd(event_duration, na.rm = TRUE),
mean_peak_time = mean(peak_time, na.rm = TRUE),
std_peak_time = sd(peak_time, na.rm = TRUE),
mean_peak_power = mean(log(peak_power), na.rm = TRUE),
std_peak_power = sd(log(peak_power), na.rm = TRUE),
mean_peak_frequency = mean(peak_frequency, na.rm = TRUE),
std_peak_frequency = sd(peak_frequency, na.rm = TRUE),
count = n(),
.groups = 'drop'
)
# adds reaction_time, reach_time, and reaction_time_binary columns
summary_df <- df %>%
group_by(trial) %>%
summarize(
reaction_time = log(first(reaction_time)),
reach_time = log(first(reach_time)),
position = first(position),
layout = first(layout),
.groups = 'drop'
)
# pivots the statistics dataframe from long to wide format
pred_df <- stats_df %>%
pivot_wider(
id_cols = trial,
names_from = freq_band,
values_from = c(mean_freq_span, std_freq_span, mean_event_duration, std_event_duration, mean_peak_time, std_peak_time, mean_peak_power, std_peak_power,
mean_peak_frequency, std_peak_frequency, count),
names_sep = "_"
) %>%
left_join(summary_df, by = "trial")
pred_df <- pred_df %>% mutate(across(where(is.numeric), scale))
median_reaction_time <- median(pred_df$reaction_time)
pred_df['reaction_binary'] <- pred_df$reaction_time < median_reaction_time
median_reach_time <- median(pred_df$reach_time)
pred_df['reach_binary'] <- pred_df$reach_time < median_reach_time
# NA is calculated for std; when there is only 1 observation, replace with zero
pred_df[is.na(pred_df)] <- 0
reaction_linear_df <- subset(pred_df, select = -c(reach_time, reaction_binary, reach_binary))
reach_linear_df <- subset(pred_df, select = -c(reaction_time, reaction_binary, reach_binary))
reaction_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reach_binary))
reach_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reaction_binary))
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
# backward and forward stepwise regression
reaction_linear_step <- stepAIC(reaction_lm, direction = "both")
reach_lm <- lm(reach_time ~ ., data = reach_linear_df)
# backward and forward stepwise regression
reach_linear_step <- stepAIC(reach_lm, direction = "both")
reaction_logit <- glm(reaction_binary ~ ., family = binomial(link = "logit"), data = reaction_binary_df)
# backward and forward stepwise regression
reaction_logit_step <- stepAIC(reaction_logit, direction = "both")
rm(list=ls())
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(MASS))
df_alpha <- read_csv("../data/alpha_event_data.csv", show_col_types = FALSE)
df_beta <- read_csv("../data/beta_event_data.csv", show_col_types = FALSE)
df_gamma <- read_csv("../data/gamma_event_data.csv", show_col_types = FALSE)
band_names <- rep(c('alpha', 'beta', 'gamma'),
times = c(nrow(df_alpha), nrow(df_beta), nrow(df_gamma)))
df <- rbind(df_alpha, df_beta, df_gamma)
names(df) <- tolower(str_replace_all(names(df_alpha), ' ', '_')) # clean names
df['freq_band'] <- band_names
df['position'] <- as.character(df$position)
df['layout'] <- as.character(df$layout)
stats_df <- df %>%
group_by(trial, freq_band) %>%
summarize(
mean_freq_span = mean(frequency_span, na.rm = TRUE),
std_freq_span = sd(frequency_span, na.rm = TRUE),
mean_event_duration = mean(event_duration, na.rm = TRUE),
std_event_duration = sd(event_duration, na.rm = TRUE),
mean_peak_time = mean(peak_time, na.rm = TRUE),
std_peak_time = sd(peak_time, na.rm = TRUE),
mean_peak_power = mean(log(peak_power), na.rm = TRUE),
std_peak_power = sd(log(peak_power), na.rm = TRUE),
mean_peak_frequency = mean(peak_frequency, na.rm = TRUE),
std_peak_frequency = sd(peak_frequency, na.rm = TRUE),
count = n(),
.groups = 'drop'
)
# adds reaction_time, reach_time, and reaction_time_binary columns
summary_df <- df %>%
group_by(trial) %>%
summarize(
reaction_time = log(first(reaction_time)),
reach_time = log(first(reach_time)),
position = first(position),
layout = first(layout),
.groups = 'drop'
)
# pivots the statistics dataframe from long to wide format
pred_df <- stats_df %>%
pivot_wider(
id_cols = trial,
names_from = freq_band,
values_from = c(mean_freq_span, std_freq_span, mean_event_duration, std_event_duration, mean_peak_time, std_peak_time, mean_peak_power, std_peak_power,
mean_peak_frequency, std_peak_frequency, count),
names_sep = "_"
) %>%
left_join(summary_df, by = "trial")
pred_df <- pred_df %>% mutate(across(where(is.numeric), scale))
median_reaction_time <- median(pred_df$reaction_time)
pred_df['reaction_binary'] <- pred_df$reaction_time < median_reaction_time
median_reach_time <- median(pred_df$reach_time)
pred_df['reach_binary'] <- pred_df$reach_time < median_reach_time
# NA is calculated for std; when there is only 1 observation, replace with zero
pred_df[is.na(pred_df)] <- 0
reaction_linear_df <- subset(pred_df, select = -c(reach_time, reaction_binary, reach_binary))
reach_linear_df <- subset(pred_df, select = -c(reaction_time, reaction_binary, reach_binary))
reaction_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reach_binary))
reach_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reaction_binary))
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
# backward and forward stepwise regression
reaction_linear_step <- stepAIC(reaction_lm, direction = "both")
invisible(summary(reaction_linear_step)$coef)
reach_lm <- lm(reach_time ~ ., data = reach_linear_df)
# backward and forward stepwise regression
reach_linear_step <- stepAIC(reach_lm, direction = "both")
invisible(summary(reach_linear_step)$coef)
reaction_logit <- glm(reaction_binary ~ ., family = binomial(link = "logit"), data = reaction_binary_df)
# backward and forward stepwise regression
reaction_logit_step <- stepAIC(reaction_logit, direction = "both")
invisible(summary(reaction_logit)$coef)
reach_logit <- glm(reach_binary ~ ., family = binomial(link = "logit"), data = reach_binary_df)
# backward and forward stepwise regression
reach_logit_step <- stepAIC(reach_logit, direction = "both")
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
# backward and forward stepwise regression
reaction_linear_step <- invisible(stepAIC(reaction_lm, direction = "both"))
invisible({
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
reaction_linear_step <- stepAIC(reaction_lm, direction = "both")
})
invisible({
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
reaction_linear_step <- stepAIC(reaction_lm, direction = "both")
})
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
# backward and forward stepwise regression
reaction_linear_step <- invisible(stepAIC(reaction_lm, direction = "both"))
summary(reaction_linear_step)$coef
reach_lm <- lm(reach_time ~ ., data = reach_linear_df)
# backward and forward stepwise regression
reach_linear_step <- stepAIC(reach_lm, direction = "both")
summary(reach_linear_step)$coef
reaction_logit <- glm(reaction_binary ~ ., family = binomial(link = "logit"), data = reaction_binary_df)
# backward and forward stepwise regression
reaction_logit_step <- stepAIC(reaction_logit, direction = "both")
summary(reaction_logit)$coef
reach_logit <- glm(reach_binary ~ ., family = binomial(link = "logit"), data = reach_binary_df)
# backward and forward stepwise regression
reach_logit_step <- stepAIC(reach_logit, direction = "both")
summary(reach_logit)$coef
summary(reaction_linear_step)
summary(reach_linear_step)
summary(reaction_logit_step)
summary(reach_logit_step)
linear_results_plot <- dwplot(list(reaction_linear_step, reach_linear_step), ci = 0.90) +
labs(x = "Coefficient Estimate", y = "Covariate", title = 'Linear') +
scale_color_discrete(name = 'Model', labels = c('Reaction', 'Reach')) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_bw()
suppressPackageStartupMessages(library(sjPlot))
install.packages("sjPlot")
suppressPackageStartupMessages(library(sjPlot))
rm(list=ls())
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(MASS))
suppressPackageStartupMessages(library(sjPlot))
df_alpha <- read_csv("../data/alpha_event_data.csv", show_col_types = FALSE)
df_beta <- read_csv("../data/beta_event_data.csv", show_col_types = FALSE)
df_gamma <- read_csv("../data/gamma_event_data.csv", show_col_types = FALSE)
band_names <- rep(c('alpha', 'beta', 'gamma'),
times = c(nrow(df_alpha), nrow(df_beta), nrow(df_gamma)))
df <- rbind(df_alpha, df_beta, df_gamma)
names(df) <- tolower(str_replace_all(names(df_alpha), ' ', '_')) # clean names
df['freq_band'] <- band_names
df['position'] <- as.character(df$position)
df['layout'] <- as.character(df$layout)
stats_df <- df %>%
group_by(trial, freq_band) %>%
summarize(
mean_freq_span = mean(frequency_span, na.rm = TRUE),
std_freq_span = sd(frequency_span, na.rm = TRUE),
mean_event_duration = mean(event_duration, na.rm = TRUE),
std_event_duration = sd(event_duration, na.rm = TRUE),
mean_peak_time = mean(peak_time, na.rm = TRUE),
std_peak_time = sd(peak_time, na.rm = TRUE),
mean_peak_power = mean(log(peak_power), na.rm = TRUE),
std_peak_power = sd(log(peak_power), na.rm = TRUE),
mean_peak_frequency = mean(peak_frequency, na.rm = TRUE),
std_peak_frequency = sd(peak_frequency, na.rm = TRUE),
count = n(),
.groups = 'drop'
)
# adds reaction_time, reach_time, and reaction_time_binary columns
summary_df <- df %>%
group_by(trial) %>%
summarize(
reaction_time = log(first(reaction_time)),
reach_time = log(first(reach_time)),
position = first(position),
layout = first(layout),
.groups = 'drop'
)
# pivots the statistics dataframe from long to wide format
pred_df <- stats_df %>%
pivot_wider(
id_cols = trial,
names_from = freq_band,
values_from = c(mean_freq_span, std_freq_span, mean_event_duration, std_event_duration, mean_peak_time, std_peak_time, mean_peak_power, std_peak_power,
mean_peak_frequency, std_peak_frequency, count),
names_sep = "_"
) %>%
left_join(summary_df, by = "trial")
pred_df <- pred_df %>% mutate(across(where(is.numeric), scale))
median_reaction_time <- median(pred_df$reaction_time)
pred_df['reaction_binary'] <- pred_df$reaction_time < median_reaction_time
median_reach_time <- median(pred_df$reach_time)
pred_df['reach_binary'] <- pred_df$reach_time < median_reach_time
# NA is calculated for std; when there is only 1 observation, replace with zero
pred_df[is.na(pred_df)] <- 0
reaction_linear_df <- subset(pred_df, select = -c(reach_time, reaction_binary, reach_binary))
reach_linear_df <- subset(pred_df, select = -c(reaction_time, reaction_binary, reach_binary))
reaction_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reach_binary))
reach_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reaction_binary))
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
# backward and forward stepwise regression
reaction_linear_step <- invisible(stepAIC(reaction_lm, direction = "both"))
summary(reaction_linear_step)$coef
reach_lm <- lm(reach_time ~ ., data = reach_linear_df)
# backward and forward stepwise regression
reach_linear_step <- stepAIC(reach_lm, direction = "both")
summary(reach_linear_step)$coef
reaction_logit <- glm(reaction_binary ~ ., family = binomial(link = "logit"), data = reaction_binary_df)
# backward and forward stepwise regression
reaction_logit_step <- stepAIC(reaction_logit, direction = "both")
summary(reaction_logit)$coef
reach_logit <- glm(reach_binary ~ ., family = binomial(link = "logit"), data = reach_binary_df)
# backward and forward stepwise regression
reach_logit_step <- stepAIC(reach_logit, direction = "both")
summary(reach_logit)$coef
summary(reaction_linear_step)
summary(reach_linear_step)
summary(reaction_logit_step)
summary(reach_logit_step)
linear_results_plot <- dwplot(list(reaction_linear_step, reach_linear_step), ci = 0.90) +
labs(x = "Coefficient Estimate", y = "Covariate", title = 'Linear') +
scale_color_discrete(name = 'Model', labels = c('Reaction', 'Reach')) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_bw()
install.packages("dotwhisker")
rm(list=ls())
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(MASS))
suppressPackageStartupMessages(library(dotwhisker))
df_alpha <- read_csv("../data/alpha_event_data.csv", show_col_types = FALSE)
df_beta <- read_csv("../data/beta_event_data.csv", show_col_types = FALSE)
df_gamma <- read_csv("../data/gamma_event_data.csv", show_col_types = FALSE)
band_names <- rep(c('alpha', 'beta', 'gamma'),
times = c(nrow(df_alpha), nrow(df_beta), nrow(df_gamma)))
df <- rbind(df_alpha, df_beta, df_gamma)
names(df) <- tolower(str_replace_all(names(df_alpha), ' ', '_')) # clean names
df['freq_band'] <- band_names
df['position'] <- as.character(df$position)
df['layout'] <- as.character(df$layout)
linear_results_plot <- dwplot(list(reaction_linear_step, reach_linear_step), ci = 0.90) +
labs(x = "Coefficient Estimate", y = "Covariate", title = 'Linear') +
scale_color_discrete(name = 'Model', labels = c('Reaction', 'Reach')) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_bw()
stats_df <- df %>%
group_by(trial, freq_band) %>%
summarize(
mean_freq_span = mean(frequency_span, na.rm = TRUE),
std_freq_span = sd(frequency_span, na.rm = TRUE),
mean_event_duration = mean(event_duration, na.rm = TRUE),
std_event_duration = sd(event_duration, na.rm = TRUE),
mean_peak_time = mean(peak_time, na.rm = TRUE),
std_peak_time = sd(peak_time, na.rm = TRUE),
mean_peak_power = mean(log(peak_power), na.rm = TRUE),
std_peak_power = sd(log(peak_power), na.rm = TRUE),
mean_peak_frequency = mean(peak_frequency, na.rm = TRUE),
std_peak_frequency = sd(peak_frequency, na.rm = TRUE),
count = n(),
.groups = 'drop'
)
# adds reaction_time, reach_time, and reaction_time_binary columns
summary_df <- df %>%
group_by(trial) %>%
summarize(
reaction_time = log(first(reaction_time)),
reach_time = log(first(reach_time)),
position = first(position),
layout = first(layout),
.groups = 'drop'
)
# pivots the statistics dataframe from long to wide format
pred_df <- stats_df %>%
pivot_wider(
id_cols = trial,
names_from = freq_band,
values_from = c(mean_freq_span, std_freq_span, mean_event_duration, std_event_duration, mean_peak_time, std_peak_time, mean_peak_power, std_peak_power,
mean_peak_frequency, std_peak_frequency, count),
names_sep = "_"
) %>%
left_join(summary_df, by = "trial")
pred_df <- pred_df %>% mutate(across(where(is.numeric), scale))
median_reaction_time <- median(pred_df$reaction_time)
pred_df['reaction_binary'] <- pred_df$reaction_time < median_reaction_time
median_reach_time <- median(pred_df$reach_time)
pred_df['reach_binary'] <- pred_df$reach_time < median_reach_time
# NA is calculated for std; when there is only 1 observation, replace with zero
pred_df[is.na(pred_df)] <- 0
reaction_linear_df <- subset(pred_df, select = -c(reach_time, reaction_binary, reach_binary))
reach_linear_df <- subset(pred_df, select = -c(reaction_time, reaction_binary, reach_binary))
reaction_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reach_binary))
reach_binary_df <- subset(pred_df, select = -c(reach_time, reaction_time, reaction_binary))
reaction_lm <- lm(reaction_time ~ ., data = reaction_linear_df)
# backward and forward stepwise regression
reaction_linear_step <- invisible(stepAIC(reaction_lm, direction = "both"))
summary(reaction_linear_step)$coef
reach_lm <- lm(reach_time ~ ., data = reach_linear_df)
# backward and forward stepwise regression
reach_linear_step <- stepAIC(reach_lm, direction = "both")
summary(reach_linear_step)$coef
reaction_logit <- glm(reaction_binary ~ ., family = binomial(link = "logit"), data = reaction_binary_df)
# backward and forward stepwise regression
reaction_logit_step <- stepAIC(reaction_logit, direction = "both")
summary(reaction_logit)$coef
reach_logit <- glm(reach_binary ~ ., family = binomial(link = "logit"), data = reach_binary_df)
# backward and forward stepwise regression
reach_logit_step <- stepAIC(reach_logit, direction = "both")
summary(reach_logit)$coef
summary(reaction_linear_step)
summary(reach_linear_step)
summary(reaction_logit_step)
summary(reach_logit_step)
linear_results_plot <- dwplot(list(reaction_linear_step, reach_linear_step), ci = 0.90) +
labs(x = "Coefficient Estimate", y = "Covariate", title = 'Linear') +
scale_color_discrete(name = 'Model', labels = c('Reaction', 'Reach')) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_bw()
ggsave('linear_regression_coef.png', plot = linear_results_plot, dpi = 800, height = 4, width = 7)
show(linear_results_plot)
logistic_results_plot <- dwplot(list(reaction_logit_step, reach_logit_step), ci = 0.90) +
labs(x = "Coefficient Estimate", y = "Covariate", title = 'Logistic (R Squared = )') +
scale_color_discrete(name = 'Model', labels = c('Reaction', 'Reach')) +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_bw()
ggsave('logistic_regression_coef.png', plot = logistic_results_plot, dpi = 800, height = 4, width = 7)
show(logistic_results_plot)
